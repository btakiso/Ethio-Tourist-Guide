// Mocks generated by Mockito 5.4.4 from annotations
// in ethio_tourist_guide/test/homepage_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:ethio_tourist_guide/models/destination.dart' as _i3;
import 'package:ethio_tourist_guide/models/hotel.dart' as _i4;
import 'package:ethio_tourist_guide/models/meal.dart' as _i6;
import 'package:ethio_tourist_guide/models/restaurant.dart' as _i5;
import 'package:ethio_tourist_guide/utils/database_helper.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDestination_1 extends _i1.SmartFake implements _i3.Destination {
  _FakeDestination_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHotel_2 extends _i1.SmartFake implements _i4.Hotel {
  _FakeHotel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRestaurant_3 extends _i1.SmartFake implements _i5.Restaurant {
  _FakeRestaurant_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMeal_4 extends _i1.SmartFake implements _i6.Meal {
  _FakeMeal_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i7.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i8.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i8.Future<_i2.Database>);

  @override
  _i8.Future<int> addDestination(_i3.Destination? destination) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDestination,
          [destination],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<List<_i3.Destination>> getDestinations() => (super.noSuchMethod(
        Invocation.method(
          #getDestinations,
          [],
        ),
        returnValue:
            _i8.Future<List<_i3.Destination>>.value(<_i3.Destination>[]),
      ) as _i8.Future<List<_i3.Destination>>);

  @override
  _i8.Future<List<_i3.Destination>> getFilteredDestinations({
    bool? category,
    double? minPrice,
    double? maxPrice,
    double? rating,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilteredDestinations,
          [],
          {
            #category: category,
            #minPrice: minPrice,
            #maxPrice: maxPrice,
            #rating: rating,
          },
        ),
        returnValue:
            _i8.Future<List<_i3.Destination>>.value(<_i3.Destination>[]),
      ) as _i8.Future<List<_i3.Destination>>);

  @override
  _i8.Future<void> updateFavorite(
    int? id,
    bool? isFavorite,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFavorite,
          [
            id,
            isFavorite,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i4.Hotel>> getHotels() => (super.noSuchMethod(
        Invocation.method(
          #getHotels,
          [],
        ),
        returnValue: _i8.Future<List<_i4.Hotel>>.value(<_i4.Hotel>[]),
      ) as _i8.Future<List<_i4.Hotel>>);

  @override
  _i8.Future<List<_i5.Restaurant>> getRestaurants() => (super.noSuchMethod(
        Invocation.method(
          #getRestaurants,
          [],
        ),
        returnValue: _i8.Future<List<_i5.Restaurant>>.value(<_i5.Restaurant>[]),
      ) as _i8.Future<List<_i5.Restaurant>>);

  @override
  _i8.Future<_i3.Destination> getDestinationById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDestinationById,
          [id],
        ),
        returnValue: _i8.Future<_i3.Destination>.value(_FakeDestination_1(
          this,
          Invocation.method(
            #getDestinationById,
            [id],
          ),
        )),
      ) as _i8.Future<_i3.Destination>);

  @override
  _i8.Future<_i4.Hotel> getHotelById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getHotelById,
          [id],
        ),
        returnValue: _i8.Future<_i4.Hotel>.value(_FakeHotel_2(
          this,
          Invocation.method(
            #getHotelById,
            [id],
          ),
        )),
      ) as _i8.Future<_i4.Hotel>);

  @override
  _i8.Future<_i5.Restaurant> getRestaurantById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getRestaurantById,
          [id],
        ),
        returnValue: _i8.Future<_i5.Restaurant>.value(_FakeRestaurant_3(
          this,
          Invocation.method(
            #getRestaurantById,
            [id],
          ),
        )),
      ) as _i8.Future<_i5.Restaurant>);

  @override
  _i8.Future<List<_i3.Destination>> getPopularDestinations() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularDestinations,
          [],
        ),
        returnValue:
            _i8.Future<List<_i3.Destination>>.value(<_i3.Destination>[]),
      ) as _i8.Future<List<_i3.Destination>>);

  @override
  _i8.Future<List<_i6.Meal>> getMeals() => (super.noSuchMethod(
        Invocation.method(
          #getMeals,
          [],
        ),
        returnValue: _i8.Future<List<_i6.Meal>>.value(<_i6.Meal>[]),
      ) as _i8.Future<List<_i6.Meal>>);

  @override
  _i8.Future<_i6.Meal> getMealById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getMealById,
          [id],
        ),
        returnValue: _i8.Future<_i6.Meal>.value(_FakeMeal_4(
          this,
          Invocation.method(
            #getMealById,
            [id],
          ),
        )),
      ) as _i8.Future<_i6.Meal>);
}
